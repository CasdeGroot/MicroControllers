
TestingTheBoards.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bfd  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000911  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b77  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011352  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000aa  00000000  00000000  00013722  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000137cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003b42  00000000  00000000  00013824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	49 d0       	rcall	.+146    	; 0x146 <main>
  b4:	4f c0       	rjmp	.+158    	; 0x154 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  b8:	08 95       	ret

000000ba <wait>:
void assignment5()
{
	while(1)
	{
		int index = 0;
		while(pattern[index].delay != 0)
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	6c f4       	brge	.+26     	; 0xda <wait+0x20>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	ef ec       	ldi	r30, 0xCF	; 207
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <wait+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <wait+0x14>
  ce:	00 00       	nop
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	28 17       	cp	r18, r24
  d6:	39 07       	cpc	r19, r25
  d8:	a9 f7       	brne	.-22     	; 0xc4 <wait+0xa>
  da:	08 95       	ret

000000dc <assignment6>:
{
	int state = 1;
	
	while(1)
	{
		DDRC = 0b11111110;
  dc:	de ef       	ldi	r29, 0xFE	; 254
				{			
						state = 0;
				}
			}
			
			PORTC = 0b01000000;
  de:	c0 e4       	ldi	r28, 0x40	; 64
{
	int state = 1;
	
	while(1)
	{
		DDRC = 0b11111110;
  e0:	d4 bb       	out	0x14, r29	; 20
		
		while(state == 1)
		{
			if(PINC & 1)
  e2:	98 9b       	sbis	0x13, 0	; 19
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <assignment6+0x14>
			{
				wait(1000);
  e6:	88 ee       	ldi	r24, 0xE8	; 232
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	e7 df       	rcall	.-50     	; 0xba <wait>
				if(PINC & 1)
  ec:	98 99       	sbic	0x13, 0	; 19
  ee:	19 c0       	rjmp	.+50     	; 0x122 <assignment6+0x46>
				{			
						state = 0;
				}
			}
			
			PORTC = 0b01000000;
  f0:	c5 bb       	out	0x15, r28	; 21
			wait(1000);
  f2:	88 ee       	ldi	r24, 0xE8	; 232
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	e1 df       	rcall	.-62     	; 0xba <wait>
			PORTC = 0b00000000;
  f8:	15 ba       	out	0x15, r1	; 21
			wait(1000);
  fa:	88 ee       	ldi	r24, 0xE8	; 232
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	dd df       	rcall	.-70     	; 0xba <wait>
 100:	f0 cf       	rjmp	.-32     	; 0xe2 <assignment6+0x6>
		}
		
		while(state == 0)
		{
			if(PINC &1)
 102:	98 9b       	sbis	0x13, 0	; 19
 104:	05 c0       	rjmp	.+10     	; 0x110 <assignment6+0x34>
			{
				wait(1000);
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	d7 df       	rcall	.-82     	; 0xba <wait>
				if(PINC & 1)
 10c:	98 99       	sbic	0x13, 0	; 19
 10e:	12 c0       	rjmp	.+36     	; 0x134 <assignment6+0x58>
				{			
						state = 1;
				}
			}
			
			PORTC = 0b01000000;
 110:	c5 bb       	out	0x15, r28	; 21
			wait(250);
 112:	8a ef       	ldi	r24, 0xFA	; 250
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	d1 df       	rcall	.-94     	; 0xba <wait>
			PORTC = 0b00000000;
 118:	15 ba       	out	0x15, r1	; 21
			wait(250);
 11a:	8a ef       	ldi	r24, 0xFA	; 250
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	cd df       	rcall	.-102    	; 0xba <wait>
 120:	f0 cf       	rjmp	.-32     	; 0x102 <assignment6+0x26>
				{			
						state = 0;
				}
			}
			
			PORTC = 0b01000000;
 122:	c5 bb       	out	0x15, r28	; 21
			wait(1000);
 124:	88 ee       	ldi	r24, 0xE8	; 232
 126:	93 e0       	ldi	r25, 0x03	; 3
 128:	c8 df       	rcall	.-112    	; 0xba <wait>
			PORTC = 0b00000000;
 12a:	15 ba       	out	0x15, r1	; 21
			wait(1000);
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	c4 df       	rcall	.-120    	; 0xba <wait>
 132:	e7 cf       	rjmp	.-50     	; 0x102 <assignment6+0x26>
				{			
						state = 1;
				}
			}
			
			PORTC = 0b01000000;
 134:	c5 bb       	out	0x15, r28	; 21
			wait(250);
 136:	8a ef       	ldi	r24, 0xFA	; 250
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	bf df       	rcall	.-130    	; 0xba <wait>
			PORTC = 0b00000000;
 13c:	15 ba       	out	0x15, r1	; 21
			wait(250);
 13e:	8a ef       	ldi	r24, 0xFA	; 250
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	bb df       	rcall	.-138    	; 0xba <wait>
 144:	cd cf       	rjmp	.-102    	; 0xe0 <assignment6+0x4>

00000146 <main>:



int main (void)
{
	DDRA = 0b11111111;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
 14a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b11111111;
 14c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
 14e:	81 bb       	out	0x11, r24	; 17
	/* Insert system clock initialization code here (sysclk_init()). */
	
	board_init();
 150:	b3 df       	rcall	.-154    	; 0xb8 <board_init>

	//testBoard();
	assignment6();
 152:	c4 df       	rcall	.-120    	; 0xdc <assignment6>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
