
Week 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d36  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000998  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007c6b  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000296  00000000  00000000  0000a143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000a3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d9e  00000000  00000000  0000a451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	44 c0       	rjmp	.+136    	; 0xae <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	34 d0       	rcall	.+104    	; 0x112 <main>
  aa:	67 c0       	rjmp	.+206    	; 0x17a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_9>:
  int ocr_count = 0;

  void timer2_init(void);

  ISR(TIMER2_COMP_vect)
  {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	ocr_count++;
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(ocr_count == 150)
  d0:	86 39       	cpi	r24, 0x96	; 150
  d2:	91 05       	cpc	r25, r1
  d4:	11 f4       	brne	.+4      	; 0xda <__vector_9+0x2c>
	{
	 PORTD = 0b10000000;	 
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	82 bb       	out	0x12, r24	; 18
	}
	
	if (ocr_count == 400)
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e2:	80 39       	cpi	r24, 0x90	; 144
  e4:	91 40       	sbci	r25, 0x01	; 1
  e6:	29 f4       	brne	.+10     	; 0xf2 <__vector_9+0x44>
	{
		PORTD = 0b00000000;
  e8:	12 ba       	out	0x12, r1	; 18
		ocr_count = 0;
  ea:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	 
  }
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <timer2_init>:

  void timer2_init(void)
  {
	OCR2 = 250*1;
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	83 bd       	out	0x23, r24	; 35
	TIMSK = 0b10000000;
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	87 bf       	out	0x37, r24	; 55
	sei();
 10a:	78 94       	sei
	TCCR2 = 0b00001101; //counting via PD7 prescaling 1024
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	85 bd       	out	0x25, r24	; 37
 110:	08 95       	ret

00000112 <main>:
  }

  int main(void)
  {
	  init_4bit_mode();
 112:	1b d0       	rcall	.+54     	; 0x14a <init_4bit_mode>

	  DDRC = 0xFF;
 114:	cf ef       	ldi	r28, 0xFF	; 255
 116:	c4 bb       	out	0x14, r28	; 20
	  timer2_init();
 118:	f4 df       	rcall	.-24     	; 0x102 <timer2_init>


	  DDRD = 0x00; //PD7 op input
 11a:	11 ba       	out	0x11, r1	; 17
	  DDRB = 0xFF;
 11c:	c7 bb       	out	0x17, r28	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x10>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x16>
 128:	00 00       	nop
 12a:	f9 cf       	rjmp	.-14     	; 0x11e <main+0xc>

0000012c <toggle_e_pin>:
{
		//PORTC = 0x40;	//0b0100
		//wait(1);
		//PORTC = 0x00;	//0b0000
		//wait(1);
		PORTC |= (1<<LCD_E);	// E high
 12c:	ab 9a       	sbi	0x15, 3	; 21
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <toggle_e_pin+0x6>
 136:	00 c0       	rjmp	.+0      	; 0x138 <toggle_e_pin+0xc>
 138:	00 00       	nop
		_delay_ms(1);			// nodig
		PORTC &= ~(1<<LCD_E);  	// E low
 13a:	ab 98       	cbi	0x15, 3	; 21
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <toggle_e_pin+0x14>
 144:	00 c0       	rjmp	.+0      	; 0x146 <toggle_e_pin+0x1a>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <init_4bit_mode>:
		_delay_ms(1);
}

void init_4bit_mode(void)
{
 14a:	cf 93       	push	r28
		// Alles op output mode en alles op laag
		DDRC = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x00;
 150:	15 ba       	out	0x15, r1	; 21

		
		PORTC = 0x20;	// 4 bits mode 1 line
 152:	c0 e2       	ldi	r28, 0x20	; 32
 154:	c5 bb       	out	0x15, r28	; 21
		toggle_e_pin();
 156:	ea df       	rcall	.-44     	; 0x12c <toggle_e_pin>

		
		PORTC = 0x20;   // 4 bits mode 2 lines
 158:	c5 bb       	out	0x15, r28	; 21
		toggle_e_pin();
 15a:	e8 df       	rcall	.-48     	; 0x12c <toggle_e_pin>
		PORTC = 0x80;
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	85 bb       	out	0x15, r24	; 21
		toggle_e_pin();
 160:	e5 df       	rcall	.-54     	; 0x12c <toggle_e_pin>

	
		PORTC = 0x00;   // cursor knipperen
 162:	15 ba       	out	0x15, r1	; 21
		toggle_e_pin();
 164:	e3 df       	rcall	.-58     	; 0x12c <toggle_e_pin>
		PORTC = 0xF0;
 166:	80 ef       	ldi	r24, 0xF0	; 240
 168:	85 bb       	out	0x15, r24	; 21
		toggle_e_pin();
 16a:	e0 df       	rcall	.-64     	; 0x12c <toggle_e_pin>

	
		PORTC = 0x00;   // Entry mode
 16c:	15 ba       	out	0x15, r1	; 21
		toggle_e_pin();
 16e:	de df       	rcall	.-68     	; 0x12c <toggle_e_pin>
		PORTC = 0x60;
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	85 bb       	out	0x15, r24	; 21
		toggle_e_pin();
 174:	db df       	rcall	.-74     	; 0x12c <toggle_e_pin>

	


}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
